name: Create a release when a tag is pushed

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check-version.outputs.version }}
      preview: ${{ steps.check-version.outputs.preview }}
    steps:
      - name: checkout source code
        uses: actions/checkout@v4

      - name: check version
        id: check-version
        run: |
          VERSION="$(jq -r '.version' package.json)"
          echo "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          PREVIEW="$(jq -r '.preview' package.json)"
          echo "$PREVIEW"
          echo "preview=$PREVIEW" >> $GITHUB_OUTPUT

          VERSION_TAG_HASH="$(git rev-list -n 1 "v$VERSION")"
          echo "$VERSION_TAG_HASH"

          HEAD_HASH="$(git rev-list -n 1 HEAD)"
          echo "$HEAD_HASH"

          [ "$VERSION_TAG_HASH" == "$HEAD_HASH" ]

      - name: extract version changelog section
        run: eng/extract-chagelog-section.py "${{ steps.check-version.outputs.version}}" | tee changes.md

      - name: install node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'

      - name: log depenency versions
        run: |
          node --version
          npm -v

      - name: install npm dependencies
        run: npm install

      - name: run linter
        run: npm run lint

      - name: build vsix package
        run: npm exec -- vsce package --no-dependencies

      - name: upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-files
          path: |
            vscode-lxd-${{ steps.check-version.outputs.version}}.vsix
            changes.md

  extension-registry-release:
    name: Publish to Extension Registry
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        publisher: ['@vscode/vsce', 'ovsx']
    steps:
      - name: download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-files

      - name: install node.js
        uses: actions/setup-node@v6
        with:
          node-version: 24

      - name: log depenency versions
        run: |
          node --version
          npm -v

        # set Personal Access Token for https://dev.azure.com/dviererbe
      - name: set VS Code Marketplace Personal Access Token
        if: ${{matrix.publisher == '@vscode/vsce'}}
        run: echo "VSCE_PAT=${{secrets.VSCE_PAT}}" >> ${GITHUB_ENV}
        
        # set Personal Access Token for https://open-vsx.org/
      - name: set open-vsx.org Personal Access Token 
        if: ${{matrix.publisher == 'ovsx'}}
        run: echo "OVSX_PAT=${{secrets.OVSX_PAT}}" >> ${GITHUB_ENV}

      - name: publish to VS Code marketplace
        run: |
          npx ${{matrix.publisher}} publish \
            --packagePath vscode-lxd-${{needs.build.outputs.version}}.vsix

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build,extension-registry-release]
    permissions:
      contents: write
      discussions: write
    steps:
      - name: download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-files

      - name: create GitHub release
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          GH_OPTIONS=""
          if [ "${{needs.build.outputs.preview }}" == "true" ]; then
            GH_OPTIONS="$GH_OPTIONS --prerelease"
          fi
          
          RELEASE_TITLE="Version ${{needs.build.outputs.version}}"
          RELEASE_TAG="v${{needs.build.outputs.version}}"
          RELEASE_ASSET="vscode-lxd-${{needs.build.outputs.version}}.vsix"
          
          gh release create \
            "$RELEASE_TAG" \
            "$RELEASE_ASSET" \
            --verify-tag \
            --fail-on-no-commits \
            --title "$RELEASE_TITLE" \
            --notes-file changes.md \
            --discussion-category "Announcements" \
            --repo "${{github.repository}}" \
            $GH_OPTIONS
